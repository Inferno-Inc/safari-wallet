(()=>{const e=e=>async(s,n,t={})=>{const o={method:s,params:t};e(`Sending message to SafariWebExtensionHandler: ${JSON.stringify(o)}`);const r=await browser.runtime.sendNativeMessage("ignored",o);if(e(`Result from message: ${JSON.stringify(r)}`),r.error)throw new Error(`Received error from SafariWebExtensionHandler: ${JSON.stringify(r)}`);return r},s=(e,s)=>(n,t,o={})=>{const r={destination:n,method:t,params:o,sessionId:s};return e(`Sending message to browser runtime: ${JSON.stringify(r)}`),browser.runtime.sendMessage(r)},n=(e,s)=>(n,t,o={})=>{const r={destination:n,method:t,params:o,sessionId:s};e(`Sending message to browser tabs: ${JSON.stringify(r)}`),browser.tabs.query({active:!0,currentWindow:!0},(e=>{const[s]=e;s&&s.id&&browser.tabs.sendMessage(s.id,r)}))},t=(e,s)=>(n,t={})=>{const o={method:n,params:t};return e(`Sending message to Ethereum.js: ${JSON.stringify(o)}`),s(o)},o=({logger:o})=>{const r=({method:e,params:s})=>n(o)("content",e,s),a=t(o,(e=>r({method:"forwardToEthereumJs",params:e})));return{sendToContent:r,sendToEthereumJs:a,sendToPopup:(e,n={})=>s(o)("popup",e,n),sendToNative:e(o)}},r=({logger:o})=>{const r=({method:e,params:s})=>n(o)("content",e,s),a=t(o,(e=>r({method:"forwardToEthereumJs",params:e})));return{sendToContent:r,sendToEthereumJs:a,sendToBackground:(e,n={})=>s(o)("background",e,n),sendToNative:e(o)}},a=({logger:e,sessionId:n})=>({sendToPopup:({method:t,params:o})=>s(e,n)("popup",t,o),sendToEthereumJs:({method:e,params:s})=>((e,s,n={})=>window.postMessage({destination:e,method:s,params:n}))("ethereum",e,s),sendToBackground:(t,o={})=>s(e,n)("background",t,o)}),d=(i="background",(e,...s)=>{const n=new XMLHttpRequest;n.onload=e=>{},n.open("POST",`http://localhost:8081/add?message=${e}&sender=${i}.js`,!0),n.send()});var i;const m=((e,s)=>{if("background"===e)return o(s);if("popup"===e)return r(s);if("content"===e)return a(s);throw new Error(`Unknown origin: ${e}`)})("background",{logger:d});browser.runtime.onMessage.addListener((async(e,s,n)=>{d(`Received message from browser runtime: ${JSON.stringify(e)}`);(async(s,n)=>{const{destination:t,method:o,sessionId:r,params:a}=e;"background"===t&&o===s&&(d(`Received method '${o}' with params: ${JSON.stringify(a)}`),await n(a,r))})("getState",(async(e,s)=>{const[t]=await m.sendToNative("eth_getAccounts",s),o=await m.sendToNative("eth_getBalance",s,{address:t,block:"latest"});n({address:t,balance:o}),m.sendToPopup("updateState",{address:t,balance:o})}))})),d("loaded")})();
//# sourceMappingURL=background.js.map
